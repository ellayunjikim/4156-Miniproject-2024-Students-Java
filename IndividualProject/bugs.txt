Keeping track of bugs to fix:

`Course.java`
- ennrollStudent(): always returns false (need to check if student can enroll (capacity))
- dropStudent(): always returns false (need to check if there is a student to drop (number of enrolled students not 0))
- isCourseFull(): should be opposite logic
- getCourseLocation(): returns instructor name instead of course locaion
- getInstructorName(): returns course locaion instead of instructor name
- setEnrolledStudentCount(): should not be able to set it below 0. 
PMD:
- MissingOverride:	The method 'toString()' is missing an @Override annotation.

`Department.java`
- getNumberOfMajors(): return value should not be negative.
- getDepartmentChair(): return value should be not quotation marked.
- dropPersonFromMajor(): If number of people in major is 0, should not drop to -1.
- toString() return value should be not quotation marked.
PMD:
- (use Map instead of HashMap) LooseCoupling: Avoid using implementation types like 'HashMap'; use the interface instead
- MissingOverride:	The method 'toString()' is missing an @Override annotation.

`RouteController.java`
- retrieveDept(): Should be returning NOT_FOUND if department does not contain this deptCode key instead of OK; same opposite logic for else case
- retrieveCourse(): Should be reutrning OK if the course is found (instead of FORBIDDEN). 
- getMajorCtFromDept(): Returns `-departmentMapping.get(deptCode)` but should be positive. Returns "FORBIDDEN" when department is not found, but makes more sense to be NOT_FOUND.
- findCourseTime(): Unused variable `requestedCourse`; returned "some time" instead of real time slot of the requested course. 
- setEnrollmentCount(): Should not accept negative number of students enroll count.
PMD: 
- UnnecessaryAnnotationValueElement: Avoid the use of value in annotations when its the only element
- LooseCoupling: Avoid using implementation types like 'HashMap'; use the interface instead
- UseLocaleWithCaseConversions:	When doing a String.toLowerCase()/toUpperCase() call, use a Locale

`IndividualProjectApplication.java`
PMD:
- LiteralsFirstInComparisons: Position literals first in String comparisons
- LooseCoupling: (use Map instead of HashMap) Avoid using implementation types like 'HashMap'; use the interface instead

`MyFileDatabase.java`
PMD: 
- LooseCoupling: Avoid using implementation types like 'HashMap'; use the interface instead
- ReturnEmptyCollectionRatherThanNull:	(return Collections.emptyMap() instead) Return an empty collection rather than null.